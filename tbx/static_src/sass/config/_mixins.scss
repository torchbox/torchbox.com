@use "sass:list";
@use "sass:map";
@use "functions" as *;
@use "variables" as *;

/* ============================================
    Media queries
*/
@mixin media-query($queries...) {
    @each $query in $queries {
        @each $breakpoint in $breakpoints {
            $name: list.nth($breakpoint, 1);
            $declaration: list.nth($breakpoint, 2);

            @if $query == $name and $declaration {
                @media only screen and #{$declaration} {
                    @content;
                }
            }
        }
    }
}

/* ============================================
    z-index
*/

@mixin z-index($key) {
    z-index: z-index($key);
}

/* ============================================
  Placeholder text
*/
@mixin placeholder-text() {
    &.placeholder {
        @content;
    }

    &::placeholder {
        @content;
    }
}

/* ============================================
  iOS Native vertical scroll
*/
@mixin native-vertical-scroll() {
    overflow-x: hidden;
    overflow-y: scroll;
    -webkit-overflow-scrolling: touch;
}

/* ============================================
    Output a rem and px fallback value for the given property
*/
@mixin rem($property, $values) {
    $px: ();
    $rem: ();

    @each $value in $values {
        @if $value == 0 or $value == auto or $value == inherit {
            $px: list.append($px, $value);
            $rem: list.append($rem, $value);
        } @else {
            $px: list.append($px, $value);
            $rem: list.append($rem, rem(strip-unit($value)));
        }
    }
    #{$property}: $px;
    #{$property}: $rem;
}

/* ============================================
    Output a `font-size: [x]rem;` declaration for the given px value
*/
@mixin rem-font-size($font-size) {
    @include rem(font-size, $font-size);
}

/* ============================================
    Font sizes
*/
@mixin font-size($keyword) {
    // Assuming each value in the font-size maps is a list of (size, line-height)
    $small-values: map-get($small-font-sizes, $keyword);
    $large-values: map-get($large-font-sizes, $keyword);

    // Access the font size and line height from the list
    $small-size: nth($small-values, 1);
    $small-line-height: nth($small-values, 2);

    $large-size: nth($large-values, 1);
    $large-line-height: nth($large-values, 2);

    @if $small-size == null or $large-size == null {
        @warn 'Font size `#{$keyword}` does not exist in the map.';
    } @else {
        @include rem-font-size($small-size);
        line-height: $small-line-height;

        @include media-query(large) {
            @include rem-font-size($large-size);
            line-height: $large-line-height;
        }
    }
}

/* ============================================
    Drop cap - used for heading one, heading one-b and heading two
*/
@mixin drop-cap($small-size, $large-size) {
    @include rem-font-size($small-size);
    line-height: 1; // Reset line height to 1 to avoid spacing issues
    font-weight: $weight--medium;

    @include media-query(large) {
        @include rem-font-size($large-size);
    }
}

@mixin focus-style($color: var(--color--link), $shadow: false) {
    outline: $focus-width solid var(--color--focus-ring);
    text-decoration-thickness: $link-underline-thickness-interaction;

    @if $shadow {
        text-shadow: 0 0 0.4px $color, 0 0 0.4px $color;
    }
}

/* ============================================
    Link styles - set to be the same colour as the text by default
    but can be overridden by passing in a resting colour and interaction colour
*/
@mixin link-styles(
    $color: var(--color--text),
    $interaction-color: var(--color--text),
    $shadow: false,
    $offset: 2px
) {
    color: $color;
    text-decoration: underline;
    text-decoration-thickness: $link-underline-thickness;
    text-underline-offset: $offset;

    &:hover {
        color: $interaction-color;
        text-decoration-thickness: $link-underline-thickness-interaction;

        @if $shadow {
            text-shadow: 0 0 0.4px $color, 0 0 0.4px $color;
        }
    }

    &:focus {
        @include focus-style($color, $shadow: true);
    }
}

/* ============================================
    Arrow icon styles - Hidden below medium breakpoint, shown above
    Translates on hover
*/
@mixin arrow-link-icon-styles() {
    display: none;

    @include media-query(medium) {
        display: inline-block;
        color: var(--color--decoration);
        width: 72px;
        height: 22px;
        transition: transform, $transition-quick;

        @include reduced-motion() {
            transition: none;
        }

        a:hover & {
            color: var(--color--link-interaction);
            transform: translateX(8px);

            @include reduced-motion() {
                transform: none;
            }

            @include high-contrast-mode() {
                color: var(--color--decoration);
            }
        }
    }
}

/* ============================================
    High Contrast mode in dark mode
    prefers-color-scheme: dark + forced-colors: active
*/
@mixin high-contrast-dark-mode() {
    @media (prefers-color-scheme: dark) and (forced-colors: active) {
        @content;
    }
}

/* ============================================
    High Contrast mode in light mode
    prefers-color-scheme: light + forced-colors: active
*/
@mixin high-contrast-light-mode() {
    @media (prefers-color-scheme: light) and (forced-colors: active) {
        @content;
    }
}

/* ============================================
    High Contrast mode (forced-colors: active)
*/

@mixin high-contrast-mode() {
    @media (forced-colors: active) {
        @content;
    }
}

/* ============================================
    Prefers reduced motion
*/
@mixin reduced-motion() {
    @media (prefers-reduced-motion) {
        @content;
    }
}

/* ============================================
    Spacing for h2, h3 and h4 inside rich text
*/
@mixin rich-text-heading-spacing() {
    margin: $spacer-small 0 $spacer-mini;

    @include media-query(large) {
        margin: $spacer-medium 0 $spacer-mini;
    }
}

/* =============================================
    Navigaiton mixins
*/

@mixin nav-fixed-position($header-height: $header-height-mobile) {
    width: 100%;
    height: calc(100vh - #{$header-height});
    // use dvh if supported
    height: calc(100dvh - #{$header-height});
    visibility: hidden;
    opacity: 0;
    position: fixed;
    top: $header-height;
    left: 0;
    overflow: hidden;
    overflow-y: visible; // allow scrolling within the nav
    transition: visibility 0ms ease-out 50ms, opacity 250ms ease-out 50ms;

    @include reduced-motion() {
        transition: none;
    }
}

@mixin reset-nav-fixed-position() {
    position: static;
    top: auto;
    left: auto;
    height: auto;
    width: auto;
    opacity: 1;
    transition: none;
    overflow: visible;
    visibility: visible;
}
