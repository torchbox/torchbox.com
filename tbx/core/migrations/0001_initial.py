# Generated by Django 4.2.8 on 2024-01-02 10:48

from django.db import migrations, models
import django.db.models.deletion

import modelcluster.fields
import wagtail.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks

import wagtailmarkdown.blocks
import wagtailmedia.blocks

import tbx.core.blocks
import tbx.core.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("images", "0001_initial"),
        ("wagtailcore", "0089_log_entry_data_json_null_to_object"),
    ]

    operations = [
        migrations.CreateModel(
            name="Advert",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.URLField(blank=True, null=True)),
                ("text", models.CharField(max_length=255)),
                (
                    "page",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="adverts",
                        to="wagtailcore.page",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HomePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("social_text", models.CharField(blank=True, max_length=255)),
                ("hero_intro_primary", models.TextField(blank=True)),
                ("hero_intro_secondary", models.TextField(blank=True)),
                ("intro_body", wagtail.fields.RichTextField(blank=True)),
                ("work_title", models.TextField(blank=True)),
                ("blog_title", models.TextField(blank=True)),
                ("clients_title", models.TextField(blank=True)),
                (
                    "social_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Homepage",
            },
            bases=("wagtailcore.page", models.Model),
        ),
        migrations.CreateModel(
            name="JobIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("social_text", models.CharField(blank=True, max_length=255)),
                ("strapline", models.CharField(max_length=255)),
                ("intro", wagtail.fields.RichTextField(blank=True)),
                ("jobs_xml_feed", models.URLField(blank=True)),
                (
                    "social_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page", models.Model),
        ),
        migrations.CreateModel(
            name="ParticleSnippet",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=50)),
                ("number", models.PositiveSmallIntegerField(default=50)),
                (
                    "shape_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "circle"),
                            (2, "edge"),
                            (3, "triangle"),
                            (4, "polygon"),
                            (5, "star"),
                            (6, "image"),
                        ],
                        default=1,
                    ),
                ),
                ("polygon_sides", models.PositiveSmallIntegerField(default=5)),
                (
                    "size",
                    models.DecimalField(decimal_places=1, default=2.5, max_digits=4),
                ),
                ("size_random", models.BooleanField(default=False)),
                (
                    "colour",
                    tbx.core.fields.ColorField(
                        default="ffffff",
                        help_text="Don't include # symbol.",
                        max_length=6,
                    ),
                ),
                (
                    "opacity",
                    models.DecimalField(decimal_places=1, default=0.9, max_digits=2),
                ),
                ("opacity_random", models.BooleanField(default=False)),
                (
                    "move_speed",
                    models.DecimalField(decimal_places=1, default=2.5, max_digits=2),
                ),
                (
                    "move_direction",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "none"),
                            (2, "top"),
                            (3, "top-right"),
                            (4, "right"),
                            (5, "bottom-right"),
                            (6, "bottom"),
                            (7, "bottom-left"),
                            (8, "left"),
                        ],
                        default=1,
                    ),
                ),
                ("line_linked", models.BooleanField(default=True)),
                (
                    "css_background_colour",
                    tbx.core.fields.ColorField(
                        blank=True,
                        help_text="Don't include # symbol. Will be overridden by linear gradient",
                        max_length=6,
                    ),
                ),
                (
                    "css_background_linear_gradient",
                    models.CharField(
                        blank=True,
                        help_text="Enter in the format 'to right, #2b2b2b 0%, #243e3f 28%, #2b2b2b 100%'",
                        max_length=255,
                    ),
                ),
                ("css_background_url", models.URLField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("slug", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="StandardPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("social_text", models.CharField(blank=True, max_length=255)),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            (
                                "h2",
                                wagtail.blocks.CharBlock(
                                    form_classname="title",
                                    icon="title",
                                    template="patterns/molecules/streamfield/blocks/heading2_block.html",
                                ),
                            ),
                            (
                                "h3",
                                wagtail.blocks.CharBlock(
                                    form_classname="title",
                                    icon="title",
                                    template="patterns/molecules/streamfield/blocks/heading3_block.html",
                                ),
                            ),
                            (
                                "h4",
                                wagtail.blocks.CharBlock(
                                    form_classname="title",
                                    icon="title",
                                    template="patterns/molecules/streamfield/blocks/heading4_block.html",
                                ),
                            ),
                            (
                                "intro",
                                wagtail.blocks.RichTextBlock(
                                    icon="pilcrow",
                                    template="patterns/molecules/streamfield/blocks/intro_block.html",
                                ),
                            ),
                            (
                                "paragraph",
                                wagtail.blocks.RichTextBlock(
                                    icon="pilcrow",
                                    template="patterns/molecules/streamfield/blocks/paragraph_block.html",
                                ),
                            ),
                            (
                                "aligned_image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "alignment",
                                            tbx.core.blocks.ImageFormatChoiceBlock(),
                                        ),
                                        ("caption", wagtail.blocks.CharBlock()),
                                        (
                                            "attribution",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                    ],
                                    label="Aligned image",
                                    template="patterns/molecules/streamfield/blocks/aligned_image_block.html",
                                ),
                            ),
                            (
                                "wide_image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        )
                                    ],
                                    label="Wide image",
                                    template="patterns/molecules/streamfield/blocks/wide_image_block.html",
                                ),
                            ),
                            (
                                "bustout",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        ("text", wagtail.blocks.RichTextBlock()),
                                    ],
                                    template="patterns/molecules/streamfield/blocks/bustout_block.html",
                                ),
                            ),
                            (
                                "pullquote",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "quote",
                                            wagtail.blocks.CharBlock(
                                                form_classname="quote title"
                                            ),
                                        ),
                                        ("attribution", wagtail.blocks.CharBlock()),
                                    ],
                                    template="patterns/molecules/streamfield/blocks/pullquote_block.html",
                                ),
                            ),
                            (
                                "raw_html",
                                wagtail.blocks.RawHTMLBlock(
                                    icon="code",
                                    label="Raw HTML",
                                    template="patterns/molecules/streamfield/blocks/raw_html_block.html",
                                ),
                            ),
                            (
                                "mailchimp_form",
                                wagtail.blocks.RawHTMLBlock(
                                    icon="code",
                                    label="Mailchimp embedded form",
                                    template="patterns/molecules/streamfield/blocks/mailchimp_form_block.html",
                                ),
                            ),
                            (
                                "markdown",
                                wagtailmarkdown.blocks.MarkdownBlock(
                                    icon="code",
                                    template="patterns/molecules/streamfield/blocks/markdown_block.html",
                                ),
                            ),
                            (
                                "embed",
                                wagtail.embeds.blocks.EmbedBlock(
                                    group="Media",
                                    icon="code",
                                    template="patterns/molecules/streamfield/blocks/embed_block.html",
                                ),
                            ),
                            (
                                "video_block",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "video",
                                            wagtailmedia.blocks.VideoChooserBlock(),
                                        ),
                                        (
                                            "autoplay",
                                            wagtail.blocks.BooleanBlock(
                                                default=False,
                                                help_text="Automatically start and loop the video. Please use sparingly.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "use_original_width",
                                            wagtail.blocks.BooleanBlock(
                                                default=False,
                                                help_text="Use the original width of the video instead of the default content width. Note that videos wider than the content width will be limited to the content width.",
                                                required=False,
                                            ),
                                        ),
                                    ],
                                    group="Media",
                                ),
                            ),
                        ],
                        use_json_field=True,
                    ),
                ),
                (
                    "additional_content",
                    wagtail.fields.StreamField(
                        [
                            (
                                "key_points_summary",
                                wagtail.blocks.ListBlock(
                                    wagtail.blocks.StructBlock(
                                        [
                                            ("title", wagtail.blocks.CharBlock()),
                                            ("intro", wagtail.blocks.CharBlock()),
                                            ("link", wagtail.blocks.PageChooserBlock()),
                                        ]
                                    ),
                                    help_text="Please add a minumum of 3 and a maximum of 6 key points.",
                                    icon="list-ul",
                                    max_num=6,
                                    min_num=3,
                                    template="patterns/molecules/streamfield/blocks/key_points_summary.html",
                                ),
                            ),
                            (
                                "testimonials",
                                wagtail.blocks.ListBlock(
                                    wagtail.blocks.StructBlock(
                                        [
                                            (
                                                "quote",
                                                wagtail.blocks.CharBlock(
                                                    form_classname="quote title"
                                                ),
                                            ),
                                            ("name", wagtail.blocks.CharBlock()),
                                            ("role", wagtail.blocks.CharBlock()),
                                            (
                                                "link",
                                                wagtail.blocks.StreamBlock(
                                                    [
                                                        (
                                                            "internal_link",
                                                            wagtail.blocks.StructBlock(
                                                                [
                                                                    (
                                                                        "page",
                                                                        wagtail.blocks.PageChooserBlock(),
                                                                    ),
                                                                    (
                                                                        "link_text",
                                                                        wagtail.blocks.CharBlock(
                                                                            required=False
                                                                        ),
                                                                    ),
                                                                ]
                                                            ),
                                                        ),
                                                        (
                                                            "external_link",
                                                            wagtail.blocks.StructBlock(
                                                                [
                                                                    (
                                                                        "link_url",
                                                                        wagtail.blocks.URLBlock(
                                                                            label="URL"
                                                                        ),
                                                                    ),
                                                                    (
                                                                        "link_text",
                                                                        wagtail.blocks.CharBlock(),
                                                                    ),
                                                                ]
                                                            ),
                                                        ),
                                                    ],
                                                    required=False,
                                                ),
                                            ),
                                        ]
                                    ),
                                    icon="openquote",
                                    template="patterns/molecules/streamfield/blocks/testimonial_block.html",
                                ),
                            ),
                            (
                                "clients",
                                wagtail.blocks.ListBlock(
                                    wagtail.blocks.StructBlock(
                                        [
                                            (
                                                "image",
                                                wagtail.images.blocks.ImageChooserBlock(),
                                            ),
                                            (
                                                "link",
                                                wagtail.blocks.StreamBlock(
                                                    [
                                                        (
                                                            "internal_link",
                                                            wagtail.blocks.StructBlock(
                                                                [
                                                                    (
                                                                        "page",
                                                                        wagtail.blocks.PageChooserBlock(),
                                                                    ),
                                                                    (
                                                                        "link_text",
                                                                        wagtail.blocks.CharBlock(
                                                                            required=False
                                                                        ),
                                                                    ),
                                                                ]
                                                            ),
                                                        ),
                                                        (
                                                            "external_link",
                                                            wagtail.blocks.StructBlock(
                                                                [
                                                                    (
                                                                        "link_url",
                                                                        wagtail.blocks.URLBlock(
                                                                            label="URL"
                                                                        ),
                                                                    ),
                                                                    (
                                                                        "link_text",
                                                                        wagtail.blocks.CharBlock(),
                                                                    ),
                                                                ]
                                                            ),
                                                        ),
                                                    ],
                                                    required=False,
                                                ),
                                            ),
                                        ]
                                    ),
                                    icon="site",
                                    label="Clients logo",
                                    template="patterns/molecules/streamfield/blocks/client-logo-block.html",
                                ),
                            ),
                            (
                                "embed_plus_cta",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("title", wagtail.blocks.CharBlock()),
                                        ("intro", wagtail.blocks.CharBlock()),
                                        (
                                            "link",
                                            wagtail.blocks.PageChooserBlock(
                                                required=False
                                            ),
                                        ),
                                        (
                                            "external_link",
                                            wagtail.blocks.URLBlock(
                                                label="External Link", required=False
                                            ),
                                        ),
                                        ("button_text", wagtail.blocks.CharBlock()),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(
                                                required=False
                                            ),
                                        ),
                                        (
                                            "embed",
                                            wagtail.embeds.blocks.EmbedBlock(
                                                label="Youtube Embed", required=False
                                            ),
                                        ),
                                    ],
                                    icon="code",
                                    label="Embed + CTA",
                                    template="patterns/molecules/streamfield/blocks/embed_plus_cta_block.html",
                                ),
                            ),
                            (
                                "cta",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "text",
                                            wagtail.blocks.CharBlock(
                                                help_text="Words in  &lt;span&gt; tag will display in a contrasting colour."
                                            ),
                                        ),
                                        (
                                            "link",
                                            wagtail.blocks.StreamBlock(
                                                [
                                                    (
                                                        "internal_link",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "page",
                                                                    wagtail.blocks.PageChooserBlock(),
                                                                ),
                                                                (
                                                                    "link_text",
                                                                    wagtail.blocks.CharBlock(
                                                                        required=False
                                                                    ),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                    (
                                                        "external_link",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "link_url",
                                                                    wagtail.blocks.URLBlock(
                                                                        label="URL"
                                                                    ),
                                                                ),
                                                                (
                                                                    "link_text",
                                                                    wagtail.blocks.CharBlock(),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        ),
                                    ],
                                    icon="plus-inverse",
                                    template="patterns/molecules/streamfield/blocks/cta.html",
                                ),
                            ),
                        ],
                        blank=True,
                        use_json_field=True,
                        verbose_name="Call to action",
                    ),
                ),
                (
                    "social_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page", models.Model),
        ),
        migrations.CreateModel(
            name="SocialMediaSettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "twitter_handle",
                    models.CharField(
                        blank=True,
                        help_text="Your Twitter username without the @, e.g. katyperry",
                        max_length=255,
                    ),
                ),
                (
                    "facebook_app_id",
                    models.CharField(
                        blank=True, help_text="Your Facebook app ID.", max_length=255
                    ),
                ),
                (
                    "default_sharing_text",
                    models.CharField(
                        blank=True,
                        help_text="Default sharing text to use if social text has not been set on a page.",
                        max_length=255,
                    ),
                ),
                (
                    "site_name",
                    models.CharField(
                        blank=True,
                        default="{{ cookiecutter.project_name }}",
                        help_text="Site name, used by Open Graph.",
                        max_length=255,
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MainMenu",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "menu",
                    wagtail.fields.StreamField(
                        [
                            (
                                "items",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("page", wagtail.blocks.PageChooserBlock()),
                                        (
                                            "subitems",
                                            wagtail.blocks.StreamBlock(
                                                [
                                                    (
                                                        "related_listing_page",
                                                        wagtail.blocks.PageChooserBlock(),
                                                    )
                                                ],
                                                blank=True,
                                                null=True,
                                            ),
                                        ),
                                    ]
                                ),
                            )
                        ],
                        blank=True,
                        use_json_field=True,
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="JobIndexPageJob",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("title", models.CharField(max_length=255)),
                ("level", models.CharField(max_length=255)),
                ("url", models.URLField(null=True)),
                ("location", models.CharField(blank=True, max_length=255)),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="jobs",
                        to="torchbox.jobindexpage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HomePageHeroImage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "image",
                    models.ForeignKey(
                        help_text="The hero images will be displayed in a random order.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hero_images",
                        to="torchbox.homepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HomePageFeaturedPost",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "featured_post",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="featured_posts",
                        to="torchbox.homepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GlobalSettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "addresses",
                    wagtail.fields.StreamField(
                        [
                            (
                                "address",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("title", wagtail.blocks.CharBlock(blank=True)),
                                        (
                                            "address",
                                            wagtail.blocks.RichTextBlock(blank=True),
                                        ),
                                    ]
                                ),
                            )
                        ],
                        blank=True,
                        use_json_field=True,
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Global Settings",
            },
        ),
        migrations.CreateModel(
            name="AdvertPlacement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "advert",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="torchbox.advert",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="advert_placements",
                        to="wagtailcore.page",
                    ),
                ),
            ],
        ),
    ]
